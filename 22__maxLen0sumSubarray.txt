// A Java program to find maximum length subarray with 0 sum 

note: we update max_len 2 times 
      1st if we found sum == 0 that means we have the longest 0 sum subarry found till now because we are  considering it from the starting index;
      2nd checking in between if any sum repeats itself;

import java.util.HashMap; 

class MaxLenZeroSumSub { 

	// Returns length of the maximum length subarray with 0 sum 
	static int maxLen(int arr[]) 
	{ 
		// Creates an empty hashMap hM 
		HashMap<Integer, Integer> hM = new HashMap<Integer, Integer>(); 

		int sum = 0; // Initialize sum of elements 
		int max_len = 0; // Initialize result 

		// Traverse through the given array 
		for (int i = 0; i < arr.length; i++) { 
			// Add current element to sum 
			sum += arr[i]; 

			if (arr[i] == 0 && max_len == 0)          // corner case if you encounter a single 0;
				max_len = 1; 

			if (sum == 0)              //checking 1st time.
                                                     //If we found a subarray with 0 sum then we direct update its value
				max_len = i;          for max_len, its the max length array because we are taking this array
						      from starting index there is no need to check.
						      
                                                      
				 

			// Look this sum in hash table 
			Integer prev_i = hM.get(sum); 

			// If this sum is seen before, then update max_len 
			// if required 
			if (prev_i != null)                               // Checking 2nd time;
				max_len = Math.max(max_len, i - prev_i); 
			else // Else put this sum in hash table 
				hM.put(sum, i); 
		} 

		return max_len; 
	} 

	// Drive method 
	public static void main(String arg[]) 
	{ 
		int arr[] = { 15, -2, 2, -8, 1, 7, 10, 23 }; 
		System.out.println("Length of the longest 0 sum subarray is "
						+ maxLen(arr)); 
	} 
} 
