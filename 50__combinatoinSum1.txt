
//we take the no. until it becomes greater than the target then we backtrack and take another no from list and then backtrack again when it becomes greater then again take another no. and so on;

class Solution {
    public List<List<Integer>> combinationSum(int[] nums, int target) {
         List<List<Integer>> list = new ArrayList<>();
            Arrays.sort(nums);        
            backtrack(list, new ArrayList<>(), nums, target, 0);
            return list;
    }
    
    private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int target, int start){
    if(target < 0) return;
    else if(target == 0) list.add(new ArrayList<>(tempList));
    else{ 
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, target - nums[i], i);                   // not i + 1 because we can reuse same elements
            tempList.remove(tempList.size() - 1);
        }
    }
    
    
}
    
}