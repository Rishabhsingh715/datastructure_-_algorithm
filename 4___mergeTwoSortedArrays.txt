class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
      

      //using insertion sort. Time O(n1*n2) space O(1);

//         for(int i=m; i<m+n; i++){
//             nums1[i] = nums2[i-m];
//         }
        
//         //Now insertion sort will do the work efficiently;
//         for(int i=1; i<nums1.length; i++){
//             int key = nums1[i];
//             int j = i-1;
//             while(j>=0 && nums1[j] > key){
//                 nums1[j+1] = nums1[j];
//                 j = j-1;
//             }
//             nums1[j+1] = key;
//         }
     
        
        // Now lets use another method of merge sort type in which we have time O(n1 + n2) and no extra space in this case. 
        
       
        int tail1 = m - 1, tail2 = n - 1, finished = m + n - 1;
        while (tail1 >= 0 && tail2 >= 0) {
         nums1[finished--] = (nums1[tail1] > nums2[tail2]) ? 
                             nums1[tail1--] : nums2[tail2--];
        }

    while (tail2 >= 0) { //only need to combine with remaining nums2
        nums1[finished--] = nums2[tail2--];
    }

    }
}