//this much error because the values was so big for the int to handle that is why it took 10 attempts to get the correct submission;


// see gfg min stack java for better explanation if not getting the code;
class MinStack
{
	// main stack to store elements
	private Stack<Long> s = new Stack<>();

	// variable to store minimum element
	private long min;

	// Inserts a given element on top of the stack
	public void push(long x)
	{
		if (s.empty()) {
			s.push(x);
			min = x;
		}
		else if (x > min) {
			s.push(x);
		}
		else {
			s.push(2 * x - min);
			min = x;
		}
	}

	// Removes top element from the stack and returns it
	public void pop()
	{
		if (s.empty()) {
			System.out.println("Stack underflow!!");
		}

		long top = s.peek();
		if (top < min)
			min = 2 * min - top;
		s.pop();
	}

	// Returns the minimum element from the stack in constant time
	public int getMin()
	{
		return (int)min;
	}

	public int top(){
      long t =  s.peek();
        if(t < min){
            return (int)min;
        }else{
            return (int)t;
        }
    }
}